"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9724],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(r),d=o,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},18518:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],c={sidebar_position:3},l="Economy",s={unversionedId:"trading/economy",id:"trading/economy",isDocsHomePage:!1,title:"Economy",description:"Price Economy",source:"@site/docs/trading/economy.md",sourceDirName:"trading",slug:"/trading/economy",permalink:"/docs/trading/economy",editUrl:"https://github.com/The-Microservice-Dungeon/docs/edit/main/docs/trading/economy.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tradeables (Recources/Items/Upgrades)",permalink:"/docs/trading/tradeables"},next:{title:"Robot Service Overview",permalink:"/docs/robot_entry"}},u=[{value:"Price Economy",id:"price-economy",children:[{value:"Resources sell-price adjustments",id:"resources-sell-price-adjustments",children:[]},{value:"Items buy-price adjustment",id:"items-buy-price-adjustment",children:[]}]}],p={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"economy"},"Economy"),(0,a.kt)("h2",{id:"price-economy"},"Price Economy"),(0,a.kt)("p",null,"The special items and the resources in the game will have a simulated economy. This means that the prices will be adjusted according to a different parameter."),(0,a.kt)("p",null,"Every item and resource have an own economy entity. An economy consists of a ",(0,a.kt)("inlineCode",{parentName:"p"},"buy/sell-history")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"stock/demand"),". The item-stock will not influence the number of items that can be bought. Same for the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource-demand"),". It will not influence how many resources can be sold. They are only a virtual parameter to simulate the ",(0,a.kt)("strong",{parentName:"p"},"price adjustments"),". Additionally, there is another parameter that determines a time range, over which the history should be analysed."),(0,a.kt)("p",null,"This economy basically implements a very easy form of price adjustments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"more items are bought => less stock => price high\nless items are bought => more stock => price low\n\nmore resources are sold => less demand => price low\nless resources are sold => more demand => price high\n")),(0,a.kt)("p",null,"These economies will calculate new prices after every command-execution. The prices will then be published through their corresponding events."),(0,a.kt)("p",null,"All prices will always be ",(0,a.kt)("inlineCode",{parentName:"p"},"Integers"),"."),(0,a.kt)("p",null,"(",(0,a.kt)("a",{parentName:"p",href:"https://github.com/The-Microservice-Dungeon/trading/tree/main/src/main/java/dungeon/trading/economy"},"https://github.com/The-Microservice-Dungeon/trading/tree/main/src/main/java/dungeon/trading/economy"),")"),(0,a.kt)("h3",{id:"resources-sell-price-adjustments"},"Resources sell-price adjustments"),(0,a.kt)("p",null,"There is a calculation done, which will be changing the prices of the resources gradually every round. For the calculation only matters how many resources of a certain type were sold in the past."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"newPrice = ceil(originalPrice * historyFactor)\n")),(0,a.kt)("p",null,"This factor is calculated as follows (if the factor is greater than or equals 1, the factor will be 1 and the price will stay the same):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"historyFactor = resourceDemand / soldAmountInTimeRange\n")),(0,a.kt)("p",null,"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"demand = 10; sold = 15\nfactor = 10 / 15 = 0,66\nfactor <= 1\n")),(0,a.kt)("p",null,"=> price will be changed by a factor of 0,66"),(0,a.kt)("p",null,"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"demand = 10; sold = 3\nfactor = 10 / 3 = 3,33\nfactor > 1\n")),(0,a.kt)("p",null,"=> price will stay the same"),(0,a.kt)("h3",{id:"items-buy-price-adjustment"},"Items buy-price adjustment"),(0,a.kt)("p",null,"Items are calculated with the above presented buy-history factor and an additional round-adjusting:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"newPrice = ceil(originalPrice * historyFactor * roundAdjust)\n")),(0,a.kt)("p",null,"The buy-history factor is calculated as follows (if the factor is smaller than or equals 1, the factor will be 1 and the price will stay the same):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"historyFactor = boughtAmountInTimeRange / itemStock\n")),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"stock = 5; bought = 3\nfactor = 3 / 5 = 0,6\nfactor <= 1\n")),(0,a.kt)("p",null,"=> price will stay the same"),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"stock = 2; bought = 3\nfactor = 3 / 2 = 1,5\nfactor > 1\n")),(0,a.kt)("p",null,"=> price will be changed by a factor of 1,5"),(0,a.kt)("p",null,"Also, Items will be more expensive in the endgame phases, when players have collected more wealth. This ensures a fair play."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"roundAdjust = floor(200 * (1 / (1 + e^(-0,014 * currentRound) * 199)))\n")),(0,a.kt)("p",null,"(",(0,a.kt)("a",{parentName:"p",href:"https://github.com/The-Microservice-Dungeon/trading/blob/main/src/main/java/dungeon/trading/item/Item.java"},"https://github.com/The-Microservice-Dungeon/trading/blob/main/src/main/java/dungeon/trading/item/Item.java"),")"))}m.isMDXComponent=!0}}]);